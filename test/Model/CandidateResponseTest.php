<?php
/*
 * Copyright 2017 Sterling Talent Solutions
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * CandidateResponseTest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Oda\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kennect-API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2017-10-26T14:02:28.460-07:00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the model.
 */

namespace Oda\Client;

/**
 * CandidateResponseTest Class Doc Comment
 *
 * @category    Class */
// * @description CandidateResponse
/**
 * @package     Oda\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CandidateResponseTest extends \PHPUnit_Framework_TestCase
{
    private static $subject;
    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass()
    {
        $data = array(
            'address' => new Model\Address(),
            'aliases' => array(new Model\CandidateAlias()),
            'client_reference_id' => 'client_reference_id',
            'confirmed_no_middle_name' => true,
            'dob' => 'dob',
            'drivers_license' => new Model\DriversLicense(),
            'email' => 'email',
            'family_name' => 'family_name',
            'given_name' => 'given_name',
            'id' => 'id',
            'identity_ids' => array('identity_ids'),
            'middle_name' => 'middle_name',
            'phone' => 'phone',
            'screening_ids' => array('screening_ids'),
            'ssn' => 'ssn',
            'trust_ids' => array("trust_ids")
        );

        self::$subject = new Model\CandidateResponse($data);
    }

    /**
     * Test "CandidateResponse"
     */
    public function testCandidateResponse()
    {
        $expectedJson = '{
            "address": {},
            "aliases": [
                {}
            ],
            "clientReferenceId": "client_reference_id",
            "confirmedNoMiddleName": true,
            "dob": "dob",
            "driversLicense": {},
            "email": "email",
            "familyName": "family_name",
            "givenName": "given_name",
            "id": "id",
            "identityIds": [
                "identity_ids"
            ],
            "middleName": "middle_name",
            "phone": "phone",
            "screeningIds": [
                "screening_ids"
            ],
            "ssn": "ssn",
            "trustIds": [
                "trust_ids"
            ]
        }';
        $this->assertJsonStringEqualsJsonString($expectedJson, self::$subject->__toString());
    }

    /**
     * Test attribute "address"
     */
    public function testPropertyAddress()
    {
        $this->assertEquals("Oda\Client\Model\Address", get_class(self::$subject->getAddress()));
    }

    /**
     * Test attribute "aliases"
     */
    public function testPropertyAliases()
    {
        $this->assertEquals("Oda\Client\Model\CandidateAlias", get_class(self::$subject->getAliases()[0]));
    }

    /**
     * Test attribute "client_reference_id"
     */
    public function testPropertyClientReferenceId()
    {
        $this->assertEquals("client_reference_id", self::$subject->getClientReferenceId());
    }

    /**
     * Test attribute "confirmed_no_middle_name"
     */
    public function testPropertyConfirmedNoMiddleName()
    {
        $this->assertEquals(true, self::$subject->getConfirmedNoMiddleName());
    }

    /**
     * Test attribute "dob"
     */
    public function testPropertyDob()
    {
        $this->assertEquals("dob", self::$subject->getDob());
    }

    /**
     * Test attribute "drivers_license"
     */
    public function testPropertyDriversLicense()
    {
        $this->assertEquals("Oda\Client\Model\DriversLicense", get_class(self::$subject->getDriversLicense()));
    }

    /**
     * Test attribute "email"
     */
    public function testPropertyEmail()
    {
        $this->assertEquals("email", self::$subject->getEmail());
    }

    /**
     * Test attribute "family_name"
     */
    public function testPropertyFamilyName()
    {
        $this->assertEquals("family_name", self::$subject->getFamilyName());
    }

    /**
     * Test attribute "given_name"
     */
    public function testPropertyGivenName()
    {
        $this->assertEquals("given_name", self::$subject->getGivenName());
    }

    /**
     * Test attribute "id"
     */
    public function testPropertyId()
    {
        $this->assertEquals("id", self::$subject->getId());
    }

    /**
     * Test attribute "identity_ids"
     */
    public function testPropertyIdentityIds()
    {
        $this->assertEquals("identity_ids", self::$subject->getIdentityIds()[0]);
    }

    /**
     * Test attribute "middle_name"
     */
    public function testPropertyMiddleName()
    {
        $this->assertEquals("middle_name", self::$subject->getMiddleName());
    }

    /**
     * Test attribute "phone"
     */
    public function testPropertyPhone()
    {
        $this->assertEquals("phone", self::$subject->getPhone());
    }

    /**
     * Test attribute "screening_ids"
     */
    public function testPropertyScreeningIds()
    {
        $this->assertEquals("screening_ids", self::$subject->getScreeningIds()[0]);
    }

    /**
     * Test attribute "ssn"
     */
    public function testPropertySsn()
    {
        $this->assertEquals("ssn", self::$subject->getSsn());
    }

    /**
     * Test attribute "trust_ids"
     */
    public function testPropertyTrustIds()
    {
        $this->assertEquals("trust_ids", self::$subject->getTrustIds()[0]);
    }
}
