<?php
/*
 * Copyright 2017 Sterling Talent Solutions
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * DefaultApi
 * PHP version 5
 *
 * @category Class
 * @package  Oda\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * on-demand-api
 *
 * The Sterling On Demand API allows you to integrate background checks into your platform and manage the process from end-to-end.
 *
 * OpenAPI spec version: 2018-05-08T16:44:26.238-07:00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Oda\Client\Api;

use \Oda\Client\ApiClient;
use \Oda\Client\ApiException;
use \Oda\Client\Configuration;
use \Oda\Client\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  Oda\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DefaultApi
{
    /**
     * API Client
     *
     * @var \Oda\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Oda\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Oda\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Oda\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Oda\Client\ApiClient $apiClient set the API client
     *
     * @return DefaultApi
     */
    public function setApiClient(\Oda\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation billingCodesGet
     *
     * Get a list of valid billing codes
     *
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return \Oda\Client\Model\BillingCodesResponse
     */
    public function billingCodesGet()
    {
        list($response) = $this->billingCodesGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation billingCodesGetWithHttpInfo
     *
     * Get a list of valid billing codes
     *
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return array of \Oda\Client\Model\BillingCodesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function billingCodesGetWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/billing-codes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Oda\Client\Model\BillingCodesResponse',
                '/billing-codes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Oda\Client\Model\BillingCodesResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\BillingCodesResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation candidatesGet
     *
     * Get a list of Candidates
     *
     * @param string $limit  (optional)
     * @param string $offset  (optional)
     * @param string $given_name  (optional)
     * @param string $family_name  (optional)
     * @param string $client_reference_id  (optional)
     * @param string $email  (optional)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return \Oda\Client\Model\CandidateResponse[]
     */
    public function candidatesGet($limit = null, $offset = null, $given_name = null, $family_name = null, $client_reference_id = null, $email = null)
    {
        list($response) = $this->candidatesGetWithHttpInfo($limit, $offset, $given_name, $family_name, $client_reference_id, $email);
        return $response;
    }

    /**
     * Operation candidatesGetWithHttpInfo
     *
     * Get a list of Candidates
     *
     * @param string $limit  (optional)
     * @param string $offset  (optional)
     * @param string $given_name  (optional)
     * @param string $family_name  (optional)
     * @param string $client_reference_id  (optional)
     * @param string $email  (optional)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return array of \Oda\Client\Model\CandidateResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function candidatesGetWithHttpInfo($limit = null, $offset = null, $given_name = null, $family_name = null, $client_reference_id = null, $email = null)
    {
        // parse inputs
        $resourcePath = "/candidates";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // query params
        if ($given_name !== null) {
            $queryParams['givenName'] = $this->apiClient->getSerializer()->toQueryValue($given_name);
        }
        // query params
        if ($family_name !== null) {
            $queryParams['familyName'] = $this->apiClient->getSerializer()->toQueryValue($family_name);
        }
        // query params
        if ($client_reference_id !== null) {
            $queryParams['clientReferenceId'] = $this->apiClient->getSerializer()->toQueryValue($client_reference_id);
        }
        // query params
        if ($email !== null) {
            $queryParams['email'] = $this->apiClient->getSerializer()->toQueryValue($email);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Oda\Client\Model\CandidateResponse[]',
                '/candidates'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Oda\Client\Model\CandidateResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\CandidateResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation candidatesIdDocumentsGet
     *
     * List documents attached to a candidate
     *
     * @param string $id  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return \Oda\Client\Model\CandidateDocumentResponse[]
     */
    public function candidatesIdDocumentsGet($id)
    {
        list($response) = $this->candidatesIdDocumentsGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation candidatesIdDocumentsGetWithHttpInfo
     *
     * List documents attached to a candidate
     *
     * @param string $id  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return array of \Oda\Client\Model\CandidateDocumentResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function candidatesIdDocumentsGetWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling candidatesIdDocumentsGet');
        }
        // parse inputs
        $resourcePath = "/candidates/{id}/documents";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Oda\Client\Model\CandidateDocumentResponse[]',
                '/candidates/{id}/documents'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Oda\Client\Model\CandidateDocumentResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\CandidateDocumentResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation candidatesIdDocumentsPost
     *
     * Attach a document to a candidate
     *
     * @param string $id  (required)
     * @param string $content_type  (optional)
     * @param string $file_name  (optional)
     * @param string $body  (optional)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return void
     */
    public function candidatesIdDocumentsPost($id, $content_type = null, $file_name = null, $body = null)
    {
        list($response) = $this->candidatesIdDocumentsPostWithHttpInfo($id, $content_type, $file_name, $body);
        return $response;
    }

    /**
     * Operation candidatesIdDocumentsPostWithHttpInfo
     *
     * Attach a document to a candidate
     *
     * @param string $id  (required)
     * @param string $content_type  (optional)
     * @param string $file_name  (optional)
     * @param string $body  (optional)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function candidatesIdDocumentsPostWithHttpInfo($id, $content_type = null, $file_name = null, $body = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling candidatesIdDocumentsPost');
        }
        // parse inputs
        $resourcePath = "/candidates/{id}/documents";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/octet-stream']);

        // query params
        if ($file_name !== null) {
            $queryParams['fileName'] = $this->apiClient->getSerializer()->toQueryValue($file_name);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = $this->apiClient->getSerializer()->toHeaderValue($content_type);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/candidates/{id}/documents'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation candidatesIdGet
     *
     * Get a specific Candidate
     *
     * @param string $id  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return \Oda\Client\Model\CandidateResponse
     */
    public function candidatesIdGet($id)
    {
        list($response) = $this->candidatesIdGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation candidatesIdGetWithHttpInfo
     *
     * Get a specific Candidate
     *
     * @param string $id  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return array of \Oda\Client\Model\CandidateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function candidatesIdGetWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling candidatesIdGet');
        }
        // parse inputs
        $resourcePath = "/candidates/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Oda\Client\Model\CandidateResponse',
                '/candidates/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Oda\Client\Model\CandidateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\CandidateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation candidatesIdLinksPost
     *
     * Get links to the Candidate portal for use by the Candidate
     *
     * @param string $id  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return \Oda\Client\Model\CandidatePortalLinkResponse
     */
    public function candidatesIdLinksPost($id)
    {
        list($response) = $this->candidatesIdLinksPostWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation candidatesIdLinksPostWithHttpInfo
     *
     * Get links to the Candidate portal for use by the Candidate
     *
     * @param string $id  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return array of \Oda\Client\Model\CandidatePortalLinkResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function candidatesIdLinksPostWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling candidatesIdLinksPost');
        }
        // parse inputs
        $resourcePath = "/candidates/{id}/links";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Oda\Client\Model\CandidatePortalLinkResponse',
                '/candidates/{id}/links'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Oda\Client\Model\CandidatePortalLinkResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\CandidatePortalLinkResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation candidatesIdPut
     *
     * Update a candidate
     *
     * @param string $id  (required)
     * @param \Oda\Client\Model\CandidateRequest $candidate_request  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return \Oda\Client\Model\CandidateResponse
     */
    public function candidatesIdPut($id, $candidate_request)
    {
        list($response) = $this->candidatesIdPutWithHttpInfo($id, $candidate_request);
        return $response;
    }

    /**
     * Operation candidatesIdPutWithHttpInfo
     *
     * Update a candidate
     *
     * @param string $id  (required)
     * @param \Oda\Client\Model\CandidateRequest $candidate_request  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return array of \Oda\Client\Model\CandidateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function candidatesIdPutWithHttpInfo($id, $candidate_request)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling candidatesIdPut');
        }
        // verify the required parameter 'candidate_request' is set
        if ($candidate_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $candidate_request when calling candidatesIdPut');
        }
        // parse inputs
        $resourcePath = "/candidates/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($candidate_request)) {
            $_tempBody = $candidate_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Oda\Client\Model\CandidateResponse',
                '/candidates/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Oda\Client\Model\CandidateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\CandidateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation candidatesIdTrustPost
     *
     * Trust a candidate
     *
     * @param string $id  (required)
     * @param \Oda\Client\Model\TrustedUserRequest $trusted_user_request  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return \Oda\Client\Model\TrustedUserResponse
     */
    public function candidatesIdTrustPost($id, $trusted_user_request)
    {
        list($response) = $this->candidatesIdTrustPostWithHttpInfo($id, $trusted_user_request);
        return $response;
    }

    /**
     * Operation candidatesIdTrustPostWithHttpInfo
     *
     * Trust a candidate
     *
     * @param string $id  (required)
     * @param \Oda\Client\Model\TrustedUserRequest $trusted_user_request  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return array of \Oda\Client\Model\TrustedUserResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function candidatesIdTrustPostWithHttpInfo($id, $trusted_user_request)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling candidatesIdTrustPost');
        }
        // verify the required parameter 'trusted_user_request' is set
        if ($trusted_user_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $trusted_user_request when calling candidatesIdTrustPost');
        }
        // parse inputs
        $resourcePath = "/candidates/{id}/trust";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($trusted_user_request)) {
            $_tempBody = $trusted_user_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Oda\Client\Model\TrustedUserResponse',
                '/candidates/{id}/trust'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Oda\Client\Model\TrustedUserResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\TrustedUserResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation candidatesPost
     *
     * Create a candidate
     *
     * @param \Oda\Client\Model\CandidateRequest $candidate_request  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return \Oda\Client\Model\CandidateResponse
     */
    public function candidatesPost($candidate_request)
    {
        list($response) = $this->candidatesPostWithHttpInfo($candidate_request);
        return $response;
    }

    /**
     * Operation candidatesPostWithHttpInfo
     *
     * Create a candidate
     *
     * @param \Oda\Client\Model\CandidateRequest $candidate_request  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return array of \Oda\Client\Model\CandidateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function candidatesPostWithHttpInfo($candidate_request)
    {
        // verify the required parameter 'candidate_request' is set
        if ($candidate_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $candidate_request when calling candidatesPost');
        }
        // parse inputs
        $resourcePath = "/candidates";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($candidate_request)) {
            $_tempBody = $candidate_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Oda\Client\Model\CandidateResponse',
                '/candidates'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Oda\Client\Model\CandidateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\CandidateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation chargesPost
     *
     * Create a capture
     *
     * @param \Oda\Client\Model\ChargeRequest $charge_request  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return \Oda\Client\Model\ChargeResponse
     */
    public function chargesPost($charge_request)
    {
        list($response) = $this->chargesPostWithHttpInfo($charge_request);
        return $response;
    }

    /**
     * Operation chargesPostWithHttpInfo
     *
     * Create a capture
     *
     * @param \Oda\Client\Model\ChargeRequest $charge_request  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return array of \Oda\Client\Model\ChargeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function chargesPostWithHttpInfo($charge_request)
    {
        // verify the required parameter 'charge_request' is set
        if ($charge_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $charge_request when calling chargesPost');
        }
        // parse inputs
        $resourcePath = "/charges";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($charge_request)) {
            $_tempBody = $charge_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Oda\Client\Model\ChargeResponse',
                '/charges'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Oda\Client\Model\ChargeResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\ChargeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation healthGet
     *
     * Check the health of the API
     *
     * @param string $deep  (optional)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return \Oda\Client\Model\HealthResponse
     */
    public function healthGet($deep = null)
    {
        list($response) = $this->healthGetWithHttpInfo($deep);
        return $response;
    }

    /**
     * Operation healthGetWithHttpInfo
     *
     * Check the health of the API
     *
     * @param string $deep  (optional)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return array of \Oda\Client\Model\HealthResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function healthGetWithHttpInfo($deep = null)
    {
        // parse inputs
        $resourcePath = "/health";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($deep !== null) {
            $queryParams['deep'] = $this->apiClient->getSerializer()->toQueryValue($deep);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Oda\Client\Model\HealthResponse',
                '/health'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Oda\Client\Model\HealthResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\HealthResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation identitiesIdGet
     *
     * Get a verified identity
     *
     * @param string $id  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return \Oda\Client\Model\IdentityResponse
     */
    public function identitiesIdGet($id)
    {
        list($response) = $this->identitiesIdGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation identitiesIdGetWithHttpInfo
     *
     * Get a verified identity
     *
     * @param string $id  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return array of \Oda\Client\Model\IdentityResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function identitiesIdGetWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling identitiesIdGet');
        }
        // parse inputs
        $resourcePath = "/identities/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Oda\Client\Model\IdentityResponse',
                '/identities/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Oda\Client\Model\IdentityResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\IdentityResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation identitiesIdRetryPost
     *
     * Retry creating an identity and get a new set of questions
     *
     * @param string $id  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return \Oda\Client\Model\IdentityResponse
     */
    public function identitiesIdRetryPost($id)
    {
        list($response) = $this->identitiesIdRetryPostWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation identitiesIdRetryPostWithHttpInfo
     *
     * Retry creating an identity and get a new set of questions
     *
     * @param string $id  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return array of \Oda\Client\Model\IdentityResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function identitiesIdRetryPostWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling identitiesIdRetryPost');
        }
        // parse inputs
        $resourcePath = "/identities/{id}/retry";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Oda\Client\Model\IdentityResponse',
                '/identities/{id}/retry'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Oda\Client\Model\IdentityResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\IdentityResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\IdentityResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation identitiesIdVerificationPut
     *
     * Verify an identity by providing correct answers
     *
     * @param string $id  (required)
     * @param \Oda\Client\Model\VerificationRequest $verification_request  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return \Oda\Client\Model\IdentityResponse
     */
    public function identitiesIdVerificationPut($id, $verification_request)
    {
        list($response) = $this->identitiesIdVerificationPutWithHttpInfo($id, $verification_request);
        return $response;
    }

    /**
     * Operation identitiesIdVerificationPutWithHttpInfo
     *
     * Verify an identity by providing correct answers
     *
     * @param string $id  (required)
     * @param \Oda\Client\Model\VerificationRequest $verification_request  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return array of \Oda\Client\Model\IdentityResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function identitiesIdVerificationPutWithHttpInfo($id, $verification_request)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling identitiesIdVerificationPut');
        }
        // verify the required parameter 'verification_request' is set
        if ($verification_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $verification_request when calling identitiesIdVerificationPut');
        }
        // parse inputs
        $resourcePath = "/identities/{id}/verification";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($verification_request)) {
            $_tempBody = $verification_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Oda\Client\Model\IdentityResponse',
                '/identities/{id}/verification'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Oda\Client\Model\IdentityResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\IdentityResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\IdentityResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation identitiesPost
     *
     * Get a list of questions needing to be answered before an identity can be created
     *
     * @param \Oda\Client\Model\IdentityRequest $identity_request  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return \Oda\Client\Model\IdentityResponse
     */
    public function identitiesPost($identity_request)
    {
        list($response) = $this->identitiesPostWithHttpInfo($identity_request);
        return $response;
    }

    /**
     * Operation identitiesPostWithHttpInfo
     *
     * Get a list of questions needing to be answered before an identity can be created
     *
     * @param \Oda\Client\Model\IdentityRequest $identity_request  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return array of \Oda\Client\Model\IdentityResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function identitiesPostWithHttpInfo($identity_request)
    {
        // verify the required parameter 'identity_request' is set
        if ($identity_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $identity_request when calling identitiesPost');
        }
        // parse inputs
        $resourcePath = "/identities";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($identity_request)) {
            $_tempBody = $identity_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Oda\Client\Model\IdentityResponse',
                '/identities'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Oda\Client\Model\IdentityResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\IdentityResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 501:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\IdentityResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation packagesGet
     *
     * Get a list of Packages
     *
     * @param string $all  (optional)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return \Oda\Client\Model\PackageResponse[]
     */
    public function packagesGet($all = null)
    {
        list($response) = $this->packagesGetWithHttpInfo($all);
        return $response;
    }

    /**
     * Operation packagesGetWithHttpInfo
     *
     * Get a list of Packages
     *
     * @param string $all  (optional)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return array of \Oda\Client\Model\PackageResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function packagesGetWithHttpInfo($all = null)
    {
        // parse inputs
        $resourcePath = "/packages";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($all !== null) {
            $queryParams['all'] = $this->apiClient->getSerializer()->toQueryValue($all);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Oda\Client\Model\PackageResponse[]',
                '/packages'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Oda\Client\Model\PackageResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\PackageResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation packagesIdPriceGet
     *
     * Get the estimated price of a Package
     *
     * @param string $id  (required)
     * @param string $candidate_id  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return \Oda\Client\Model\PackagePriceResponse
     */
    public function packagesIdPriceGet($id, $candidate_id)
    {
        list($response) = $this->packagesIdPriceGetWithHttpInfo($id, $candidate_id);
        return $response;
    }

    /**
     * Operation packagesIdPriceGetWithHttpInfo
     *
     * Get the estimated price of a Package
     *
     * @param string $id  (required)
     * @param string $candidate_id  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return array of \Oda\Client\Model\PackagePriceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function packagesIdPriceGetWithHttpInfo($id, $candidate_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling packagesIdPriceGet');
        }
        // verify the required parameter 'candidate_id' is set
        if ($candidate_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $candidate_id when calling packagesIdPriceGet');
        }
        // parse inputs
        $resourcePath = "/packages/{id}/price";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($candidate_id !== null) {
            $queryParams['candidateId'] = $this->apiClient->getSerializer()->toQueryValue($candidate_id);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Oda\Client\Model\PackagePriceResponse',
                '/packages/{id}/price'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Oda\Client\Model\PackagePriceResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\PackagePriceResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation referenceCodesGet
     *
     * Return a list of valid Reference Codes
     *
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return \Oda\Client\Model\ReferenceCodesResponse
     */
    public function referenceCodesGet()
    {
        list($response) = $this->referenceCodesGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation referenceCodesGetWithHttpInfo
     *
     * Return a list of valid Reference Codes
     *
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return array of \Oda\Client\Model\ReferenceCodesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function referenceCodesGetWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/reference-codes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Oda\Client\Model\ReferenceCodesResponse',
                '/reference-codes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Oda\Client\Model\ReferenceCodesResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\ReferenceCodesResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation screeningsIdAdverseActionsPost
     *
     * Create an adverse action on a Screening
     *
     * @param string $id  (required)
     * @param \Oda\Client\Model\AdverseActionRequest $adverse_action_request  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return void
     */
    public function screeningsIdAdverseActionsPost($id, $adverse_action_request)
    {
        list($response) = $this->screeningsIdAdverseActionsPostWithHttpInfo($id, $adverse_action_request);
        return $response;
    }

    /**
     * Operation screeningsIdAdverseActionsPostWithHttpInfo
     *
     * Create an adverse action on a Screening
     *
     * @param string $id  (required)
     * @param \Oda\Client\Model\AdverseActionRequest $adverse_action_request  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function screeningsIdAdverseActionsPostWithHttpInfo($id, $adverse_action_request)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling screeningsIdAdverseActionsPost');
        }
        // verify the required parameter 'adverse_action_request' is set
        if ($adverse_action_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $adverse_action_request when calling screeningsIdAdverseActionsPost');
        }
        // parse inputs
        $resourcePath = "/screenings/{id}/adverse-actions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['*/*']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($adverse_action_request)) {
            $_tempBody = $adverse_action_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/screenings/{id}/adverse-actions'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation screeningsIdDetailsGet
     *
     * Get a specific screening
     *
     * @param string $id  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return \Oda\Client\Model\ScreeningDetailsResponse[]
     */
    public function screeningsIdDetailsGet($id)
    {
        list($response) = $this->screeningsIdDetailsGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation screeningsIdDetailsGetWithHttpInfo
     *
     * Get a specific screening
     *
     * @param string $id  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return array of \Oda\Client\Model\ScreeningDetailsResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function screeningsIdDetailsGetWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling screeningsIdDetailsGet');
        }
        // parse inputs
        $resourcePath = "/screenings/{id}/details";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Oda\Client\Model\ScreeningDetailsResponse[]',
                '/screenings/{id}/details'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Oda\Client\Model\ScreeningDetailsResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\ScreeningDetailsResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation screeningsIdDocumentsAttachmentIdGet
     *
     * Get a Screening attachment in PDF form
     *
     * @param string $id  (required)
     * @param string $attachment_id  (required)
     * @param string $accept  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return string
     */
    public function screeningsIdDocumentsAttachmentIdGet($id, $attachment_id, $accept)
    {
        list($response) = $this->screeningsIdDocumentsAttachmentIdGetWithHttpInfo($id, $attachment_id, $accept);
        return $response;
    }

    /**
     * Operation screeningsIdDocumentsAttachmentIdGetWithHttpInfo
     *
     * Get a Screening attachment in PDF form
     *
     * @param string $id  (required)
     * @param string $attachment_id  (required)
     * @param string $accept  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function screeningsIdDocumentsAttachmentIdGetWithHttpInfo($id, $attachment_id, $accept)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling screeningsIdDocumentsAttachmentIdGet');
        }
        // verify the required parameter 'attachment_id' is set
        if ($attachment_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $attachment_id when calling screeningsIdDocumentsAttachmentIdGet');
        }
        // verify the required parameter 'accept' is set
        if ($accept === null) {
            throw new \InvalidArgumentException('Missing the required parameter $accept when calling screeningsIdDocumentsAttachmentIdGet');
        }
        // parse inputs
        $resourcePath = "/screenings/{id}/documents/{attachmentId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/pdf']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($attachment_id !== null) {
            $resourcePath = str_replace(
                "{" . "attachmentId" . "}",
                $this->apiClient->getSerializer()->toPathValue($attachment_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/screenings/{id}/documents/{attachmentId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation screeningsIdDocumentsGet
     *
     * 
     *
     * @param string $id  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return \Oda\Client\Model\CandidateDocumentResponse[]
     */
    public function screeningsIdDocumentsGet($id)
    {
        list($response) = $this->screeningsIdDocumentsGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation screeningsIdDocumentsGetWithHttpInfo
     *
     * 
     *
     * @param string $id  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return array of \Oda\Client\Model\CandidateDocumentResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function screeningsIdDocumentsGetWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling screeningsIdDocumentsGet');
        }
        // parse inputs
        $resourcePath = "/screenings/{id}/documents";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Oda\Client\Model\CandidateDocumentResponse[]',
                '/screenings/{id}/documents'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Oda\Client\Model\CandidateDocumentResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\CandidateDocumentResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation screeningsIdDocumentsPost
     *
     * Attach a document to a Screening
     *
     * @param string $id  (required)
     * @param string $document_type  (required)
     * @param string $party  (required)
     * @param string $content_type  (optional)
     * @param string $body  (optional)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return void
     */
    public function screeningsIdDocumentsPost($id, $document_type, $party, $content_type = null, $body = null)
    {
        list($response) = $this->screeningsIdDocumentsPostWithHttpInfo($id, $document_type, $party, $content_type, $body);
        return $response;
    }

    /**
     * Operation screeningsIdDocumentsPostWithHttpInfo
     *
     * Attach a document to a Screening
     *
     * @param string $id  (required)
     * @param string $document_type  (required)
     * @param string $party  (required)
     * @param string $content_type  (optional)
     * @param string $body  (optional)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function screeningsIdDocumentsPostWithHttpInfo($id, $document_type, $party, $content_type = null, $body = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling screeningsIdDocumentsPost');
        }
        // verify the required parameter 'document_type' is set
        if ($document_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document_type when calling screeningsIdDocumentsPost');
        }
        // verify the required parameter 'party' is set
        if ($party === null) {
            throw new \InvalidArgumentException('Missing the required parameter $party when calling screeningsIdDocumentsPost');
        }
        // parse inputs
        $resourcePath = "/screenings/{id}/documents";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/octet-stream']);

        // query params
        if ($document_type !== null) {
            $queryParams['documentType'] = $this->apiClient->getSerializer()->toQueryValue($document_type);
        }
        // query params
        if ($party !== null) {
            $queryParams['party'] = $this->apiClient->getSerializer()->toQueryValue($party);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = $this->apiClient->getSerializer()->toHeaderValue($content_type);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/screenings/{id}/documents'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation screeningsIdGet
     *
     * Get a specific screening
     *
     * @param string $id  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return \Oda\Client\Model\ScreeningResponse
     */
    public function screeningsIdGet($id)
    {
        list($response) = $this->screeningsIdGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation screeningsIdGetWithHttpInfo
     *
     * Get a specific screening
     *
     * @param string $id  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return array of \Oda\Client\Model\ScreeningResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function screeningsIdGetWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling screeningsIdGet');
        }
        // parse inputs
        $resourcePath = "/screenings/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Oda\Client\Model\ScreeningResponse',
                '/screenings/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Oda\Client\Model\ScreeningResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\ScreeningResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\ScreeningResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation screeningsIdInvitePost
     *
     * Create an invite
     *
     * @param string $id  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return \Oda\Client\Model\InviteResponse
     */
    public function screeningsIdInvitePost($id)
    {
        list($response) = $this->screeningsIdInvitePostWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation screeningsIdInvitePostWithHttpInfo
     *
     * Create an invite
     *
     * @param string $id  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return array of \Oda\Client\Model\InviteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function screeningsIdInvitePostWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling screeningsIdInvitePost');
        }
        // parse inputs
        $resourcePath = "/screenings/{id}/invite";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Oda\Client\Model\InviteResponse',
                '/screenings/{id}/invite'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Oda\Client\Model\InviteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\InviteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation screeningsIdReportGet
     *
     * Get a Screening report in PDF form
     *
     * @param string $id  (required)
     * @param string $accept  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return string
     */
    public function screeningsIdReportGet($id, $accept)
    {
        list($response) = $this->screeningsIdReportGetWithHttpInfo($id, $accept);
        return $response;
    }

    /**
     * Operation screeningsIdReportGetWithHttpInfo
     *
     * Get a Screening report in PDF form
     *
     * @param string $id  (required)
     * @param string $accept  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function screeningsIdReportGetWithHttpInfo($id, $accept)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling screeningsIdReportGet');
        }
        // verify the required parameter 'accept' is set
        if ($accept === null) {
            throw new \InvalidArgumentException('Missing the required parameter $accept when calling screeningsIdReportGet');
        }
        // parse inputs
        $resourcePath = "/screenings/{id}/report";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/pdf']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/screenings/{id}/report'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation screeningsIdReportLinksPost
     *
     * Create  a one-time use report link
     *
     * @param string $id  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return \Oda\Client\Model\OneTimeReportLinkResponse
     */
    public function screeningsIdReportLinksPost($id)
    {
        list($response) = $this->screeningsIdReportLinksPostWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation screeningsIdReportLinksPostWithHttpInfo
     *
     * Create  a one-time use report link
     *
     * @param string $id  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return array of \Oda\Client\Model\OneTimeReportLinkResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function screeningsIdReportLinksPostWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling screeningsIdReportLinksPost');
        }
        // parse inputs
        $resourcePath = "/screenings/{id}/report-links";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Oda\Client\Model\OneTimeReportLinkResponse',
                '/screenings/{id}/report-links'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Oda\Client\Model\OneTimeReportLinkResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\OneTimeReportLinkResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\OneTimeReportLinkResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation screeningsIdReportPdfGet
     *
     * Get a Screening report in PDF form
     *
     * @param string $id  (required)
     * @param string $token  (optional)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return string
     */
    public function screeningsIdReportPdfGet($id, $token = null)
    {
        list($response) = $this->screeningsIdReportPdfGetWithHttpInfo($id, $token);
        return $response;
    }

    /**
     * Operation screeningsIdReportPdfGetWithHttpInfo
     *
     * Get a Screening report in PDF form
     *
     * @param string $id  (required)
     * @param string $token  (optional)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function screeningsIdReportPdfGetWithHttpInfo($id, $token = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling screeningsIdReportPdfGet');
        }
        // parse inputs
        $resourcePath = "/screenings/{id}/report.pdf";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/pdf']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($token !== null) {
            $queryParams['token'] = $this->apiClient->getSerializer()->toQueryValue($token);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/screenings/{id}/report.pdf'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation screeningsPost
     *
     * Create a Screening
     *
     * @param \Oda\Client\Model\ScreeningRequest $screening_request  (required)
     * @param string $idempotency_key  (optional)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return \Oda\Client\Model\ScreeningResponse
     */
    public function screeningsPost($screening_request, $idempotency_key = null)
    {
        list($response) = $this->screeningsPostWithHttpInfo($screening_request, $idempotency_key);
        return $response;
    }

    /**
     * Operation screeningsPostWithHttpInfo
     *
     * Create a Screening
     *
     * @param \Oda\Client\Model\ScreeningRequest $screening_request  (required)
     * @param string $idempotency_key  (optional)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return array of \Oda\Client\Model\ScreeningResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function screeningsPostWithHttpInfo($screening_request, $idempotency_key = null)
    {
        // verify the required parameter 'screening_request' is set
        if ($screening_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $screening_request when calling screeningsPost');
        }
        // parse inputs
        $resourcePath = "/screenings";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($idempotency_key !== null) {
            $headerParams['idempotency-key'] = $this->apiClient->getSerializer()->toHeaderValue($idempotency_key);
        }
        // body params
        $_tempBody = null;
        if (isset($screening_request)) {
            $_tempBody = $screening_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Oda\Client\Model\ScreeningResponse',
                '/screenings'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Oda\Client\Model\ScreeningResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\ScreeningResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation subscriptionsIdDelete
     *
     * Delete a subscription
     *
     * @param string $id  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return \Oda\Client\Model\SubscriptionResponse
     */
    public function subscriptionsIdDelete($id)
    {
        list($response) = $this->subscriptionsIdDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation subscriptionsIdDeleteWithHttpInfo
     *
     * Delete a subscription
     *
     * @param string $id  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return array of \Oda\Client\Model\SubscriptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscriptionsIdDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling subscriptionsIdDelete');
        }
        // parse inputs
        $resourcePath = "/subscriptions/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Oda\Client\Model\SubscriptionResponse',
                '/subscriptions/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Oda\Client\Model\SubscriptionResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\SubscriptionResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\SubscriptionResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation subscriptionsIdEventsGet
     *
     * Get a list of events related to a given subscription
     *
     * @param string $id  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return \Oda\Client\Model\SubscriptionEventsResponse
     */
    public function subscriptionsIdEventsGet($id)
    {
        list($response) = $this->subscriptionsIdEventsGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation subscriptionsIdEventsGetWithHttpInfo
     *
     * Get a list of events related to a given subscription
     *
     * @param string $id  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return array of \Oda\Client\Model\SubscriptionEventsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscriptionsIdEventsGetWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling subscriptionsIdEventsGet');
        }
        // parse inputs
        $resourcePath = "/subscriptions/{id}/events";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Oda\Client\Model\SubscriptionEventsResponse',
                '/subscriptions/{id}/events'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Oda\Client\Model\SubscriptionEventsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\SubscriptionEventsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\SubscriptionEventsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation subscriptionsIdGet
     *
     * Get a subscription
     *
     * @param string $id  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return \Oda\Client\Model\SubscriptionResponse
     */
    public function subscriptionsIdGet($id)
    {
        list($response) = $this->subscriptionsIdGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation subscriptionsIdGetWithHttpInfo
     *
     * Get a subscription
     *
     * @param string $id  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return array of \Oda\Client\Model\SubscriptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscriptionsIdGetWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling subscriptionsIdGet');
        }
        // parse inputs
        $resourcePath = "/subscriptions/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Oda\Client\Model\SubscriptionResponse',
                '/subscriptions/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Oda\Client\Model\SubscriptionResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\SubscriptionResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\SubscriptionResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation subscriptionsPost
     *
     * Create a subscription
     *
     * @param \Oda\Client\Model\SubscriptionRequest $subscription_request  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return \Oda\Client\Model\SubscriptionResponse
     */
    public function subscriptionsPost($subscription_request)
    {
        list($response) = $this->subscriptionsPostWithHttpInfo($subscription_request);
        return $response;
    }

    /**
     * Operation subscriptionsPostWithHttpInfo
     *
     * Create a subscription
     *
     * @param \Oda\Client\Model\SubscriptionRequest $subscription_request  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return array of \Oda\Client\Model\SubscriptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscriptionsPostWithHttpInfo($subscription_request)
    {
        // verify the required parameter 'subscription_request' is set
        if ($subscription_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subscription_request when calling subscriptionsPost');
        }
        // parse inputs
        $resourcePath = "/subscriptions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($subscription_request)) {
            $_tempBody = $subscription_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Oda\Client\Model\SubscriptionResponse',
                '/subscriptions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Oda\Client\Model\SubscriptionResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\SubscriptionResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation tokensPost
     *
     * Creates a temporary access token
     *
     * @param \Oda\Client\Model\TokenRequest $token_request  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return \Oda\Client\Model\TokenResponse
     */
    public function tokensPost($token_request)
    {
        list($response) = $this->tokensPostWithHttpInfo($token_request);
        return $response;
    }

    /**
     * Operation tokensPostWithHttpInfo
     *
     * Creates a temporary access token
     *
     * @param \Oda\Client\Model\TokenRequest $token_request  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return array of \Oda\Client\Model\TokenResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function tokensPostWithHttpInfo($token_request)
    {
        // verify the required parameter 'token_request' is set
        if ($token_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $token_request when calling tokensPost');
        }
        // parse inputs
        $resourcePath = "/tokens";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($token_request)) {
            $_tempBody = $token_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Oda\Client\Model\TokenResponse',
                '/tokens'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Oda\Client\Model\TokenResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\TokenResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation trustedUsersIdGet
     *
     * Get trust information about a verified user
     *
     * @param string $id  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return \Oda\Client\Model\TrustedUserResponse
     */
    public function trustedUsersIdGet($id)
    {
        list($response) = $this->trustedUsersIdGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation trustedUsersIdGetWithHttpInfo
     *
     * Get trust information about a verified user
     *
     * @param string $id  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return array of \Oda\Client\Model\TrustedUserResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function trustedUsersIdGetWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling trustedUsersIdGet');
        }
        // parse inputs
        $resourcePath = "/trusted-users/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Oda\Client\Model\TrustedUserResponse',
                '/trusted-users/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Oda\Client\Model\TrustedUserResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\TrustedUserResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation trustedUsersPost
     *
     * Trust a verified user
     *
     * @param \Oda\Client\Model\TrustedUserRequest $trusted_user_request  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return \Oda\Client\Model\TrustedUserResponse
     */
    public function trustedUsersPost($trusted_user_request)
    {
        list($response) = $this->trustedUsersPostWithHttpInfo($trusted_user_request);
        return $response;
    }

    /**
     * Operation trustedUsersPostWithHttpInfo
     *
     * Trust a verified user
     *
     * @param \Oda\Client\Model\TrustedUserRequest $trusted_user_request  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return array of \Oda\Client\Model\TrustedUserResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function trustedUsersPostWithHttpInfo($trusted_user_request)
    {
        // verify the required parameter 'trusted_user_request' is set
        if ($trusted_user_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $trusted_user_request when calling trustedUsersPost');
        }
        // parse inputs
        $resourcePath = "/trusted-users";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($trusted_user_request)) {
            $_tempBody = $trusted_user_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Oda\Client\Model\TrustedUserResponse',
                '/trusted-users'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Oda\Client\Model\TrustedUserResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\TrustedUserResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Oda\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation trustsIdDelete
     *
     * Untrust a Trusted User
     *
     * @param string $id  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return void
     */
    public function trustsIdDelete($id)
    {
        list($response) = $this->trustsIdDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation trustsIdDeleteWithHttpInfo
     *
     * Untrust a Trusted User
     *
     * @param string $id  (required)
     * @throws \Oda\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function trustsIdDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling trustsIdDelete');
        }
        // parse inputs
        $resourcePath = "/trusts/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/trusts/{id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,string]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
