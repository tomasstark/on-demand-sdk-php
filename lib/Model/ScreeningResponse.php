<?php
/*
 * Copyright 2017 Sterling Talent Solutions
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * ScreeningResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Oda\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * on-demand-api
 *
 * The Sterling On Demand API allows you to integrate background checks into your platform and manage the process from end-to-end.
 *
 * OpenAPI spec version: 2018-05-08T16:44:26.238-07:00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Oda\Client\Model;

use \ArrayAccess;

/**
 * ScreeningResponse Class Doc Comment
 *
 * @category    Class
 * @package     Oda\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ScreeningResponse implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ScreeningResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'adverse_actions' => '\Oda\Client\Model\AdverseActionResponse[]',
        'billing_code' => 'string',
        'callback' => '\Oda\Client\Model\CallbackResponse',
        'candidate_id' => 'string',
        'charge_id' => 'string',
        'client_criteria_result' => 'string',
        'dispute' => '\Oda\Client\Model\Dispute',
        'id' => 'string',
        'invite' => '\Oda\Client\Model\Invite',
        'links' => '\Oda\Client\Model\ScreeningResponseLink',
        'package_id' => 'string',
        'reference_codes' => '\Oda\Client\Model\ReferenceCode[]',
        'report_items' => '\Oda\Client\Model\ScreeningResponseReportItem[]',
        'result' => 'string',
        'status' => 'string',
        'submitted_at' => '\DateTime',
        'trusted_user_id' => 'string',
        'updated_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'adverse_actions' => null,
        'billing_code' => null,
        'callback' => null,
        'candidate_id' => null,
        'charge_id' => null,
        'client_criteria_result' => null,
        'dispute' => null,
        'id' => null,
        'invite' => null,
        'links' => null,
        'package_id' => null,
        'reference_codes' => null,
        'report_items' => null,
        'result' => null,
        'status' => null,
        'submitted_at' => 'date-time',
        'trusted_user_id' => null,
        'updated_at' => 'date-time'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'adverse_actions' => 'adverseActions',
        'billing_code' => 'billingCode',
        'callback' => 'callback',
        'candidate_id' => 'candidateId',
        'charge_id' => 'chargeId',
        'client_criteria_result' => 'clientCriteriaResult',
        'dispute' => 'dispute',
        'id' => 'id',
        'invite' => 'invite',
        'links' => 'links',
        'package_id' => 'packageId',
        'reference_codes' => 'referenceCodes',
        'report_items' => 'reportItems',
        'result' => 'result',
        'status' => 'status',
        'submitted_at' => 'submittedAt',
        'trusted_user_id' => 'trustedUserId',
        'updated_at' => 'updatedAt'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'adverse_actions' => 'setAdverseActions',
        'billing_code' => 'setBillingCode',
        'callback' => 'setCallback',
        'candidate_id' => 'setCandidateId',
        'charge_id' => 'setChargeId',
        'client_criteria_result' => 'setClientCriteriaResult',
        'dispute' => 'setDispute',
        'id' => 'setId',
        'invite' => 'setInvite',
        'links' => 'setLinks',
        'package_id' => 'setPackageId',
        'reference_codes' => 'setReferenceCodes',
        'report_items' => 'setReportItems',
        'result' => 'setResult',
        'status' => 'setStatus',
        'submitted_at' => 'setSubmittedAt',
        'trusted_user_id' => 'setTrustedUserId',
        'updated_at' => 'setUpdatedAt'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'adverse_actions' => 'getAdverseActions',
        'billing_code' => 'getBillingCode',
        'callback' => 'getCallback',
        'candidate_id' => 'getCandidateId',
        'charge_id' => 'getChargeId',
        'client_criteria_result' => 'getClientCriteriaResult',
        'dispute' => 'getDispute',
        'id' => 'getId',
        'invite' => 'getInvite',
        'links' => 'getLinks',
        'package_id' => 'getPackageId',
        'reference_codes' => 'getReferenceCodes',
        'report_items' => 'getReportItems',
        'result' => 'getResult',
        'status' => 'getStatus',
        'submitted_at' => 'getSubmittedAt',
        'trusted_user_id' => 'getTrustedUserId',
        'updated_at' => 'getUpdatedAt'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['adverse_actions'] = isset($data['adverse_actions']) ? $data['adverse_actions'] : null;
        $this->container['billing_code'] = isset($data['billing_code']) ? $data['billing_code'] : null;
        $this->container['callback'] = isset($data['callback']) ? $data['callback'] : null;
        $this->container['candidate_id'] = isset($data['candidate_id']) ? $data['candidate_id'] : null;
        $this->container['charge_id'] = isset($data['charge_id']) ? $data['charge_id'] : null;
        $this->container['client_criteria_result'] = isset($data['client_criteria_result']) ? $data['client_criteria_result'] : null;
        $this->container['dispute'] = isset($data['dispute']) ? $data['dispute'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['invite'] = isset($data['invite']) ? $data['invite'] : null;
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['package_id'] = isset($data['package_id']) ? $data['package_id'] : null;
        $this->container['reference_codes'] = isset($data['reference_codes']) ? $data['reference_codes'] : null;
        $this->container['report_items'] = isset($data['report_items']) ? $data['report_items'] : null;
        $this->container['result'] = isset($data['result']) ? $data['result'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['submitted_at'] = isset($data['submitted_at']) ? $data['submitted_at'] : null;
        $this->container['trusted_user_id'] = isset($data['trusted_user_id']) ? $data['trusted_user_id'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets adverse_actions
     * @return \Oda\Client\Model\AdverseActionResponse[]
     */
    public function getAdverseActions()
    {
        return $this->container['adverse_actions'];
    }

    /**
     * Sets adverse_actions
     * @param \Oda\Client\Model\AdverseActionResponse[] $adverse_actions
     * @return $this
     */
    public function setAdverseActions($adverse_actions)
    {
        $this->container['adverse_actions'] = $adverse_actions;

        return $this;
    }

    /**
     * Gets billing_code
     * @return string
     */
    public function getBillingCode()
    {
        return $this->container['billing_code'];
    }

    /**
     * Sets billing_code
     * @param string $billing_code
     * @return $this
     */
    public function setBillingCode($billing_code)
    {
        $this->container['billing_code'] = $billing_code;

        return $this;
    }

    /**
     * Gets callback
     * @return \Oda\Client\Model\CallbackResponse
     */
    public function getCallback()
    {
        return $this->container['callback'];
    }

    /**
     * Sets callback
     * @param \Oda\Client\Model\CallbackResponse $callback
     * @return $this
     */
    public function setCallback($callback)
    {
        $this->container['callback'] = $callback;

        return $this;
    }

    /**
     * Gets candidate_id
     * @return string
     */
    public function getCandidateId()
    {
        return $this->container['candidate_id'];
    }

    /**
     * Sets candidate_id
     * @param string $candidate_id
     * @return $this
     */
    public function setCandidateId($candidate_id)
    {
        $this->container['candidate_id'] = $candidate_id;

        return $this;
    }

    /**
     * Gets charge_id
     * @return string
     */
    public function getChargeId()
    {
        return $this->container['charge_id'];
    }

    /**
     * Sets charge_id
     * @param string $charge_id
     * @return $this
     */
    public function setChargeId($charge_id)
    {
        $this->container['charge_id'] = $charge_id;

        return $this;
    }

    /**
     * Gets client_criteria_result
     * @return string
     */
    public function getClientCriteriaResult()
    {
        return $this->container['client_criteria_result'];
    }

    /**
     * Sets client_criteria_result
     * @param string $client_criteria_result
     * @return $this
     */
    public function setClientCriteriaResult($client_criteria_result)
    {
        $this->container['client_criteria_result'] = $client_criteria_result;

        return $this;
    }

    /**
     * Gets dispute
     * @return \Oda\Client\Model\Dispute
     */
    public function getDispute()
    {
        return $this->container['dispute'];
    }

    /**
     * Sets dispute
     * @param \Oda\Client\Model\Dispute $dispute
     * @return $this
     */
    public function setDispute($dispute)
    {
        $this->container['dispute'] = $dispute;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets invite
     * @return \Oda\Client\Model\Invite
     */
    public function getInvite()
    {
        return $this->container['invite'];
    }

    /**
     * Sets invite
     * @param \Oda\Client\Model\Invite $invite
     * @return $this
     */
    public function setInvite($invite)
    {
        $this->container['invite'] = $invite;

        return $this;
    }

    /**
     * Gets links
     * @return \Oda\Client\Model\ScreeningResponseLink
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     * @param \Oda\Client\Model\ScreeningResponseLink $links
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets package_id
     * @return string
     */
    public function getPackageId()
    {
        return $this->container['package_id'];
    }

    /**
     * Sets package_id
     * @param string $package_id
     * @return $this
     */
    public function setPackageId($package_id)
    {
        $this->container['package_id'] = $package_id;

        return $this;
    }

    /**
     * Gets reference_codes
     * @return \Oda\Client\Model\ReferenceCode[]
     */
    public function getReferenceCodes()
    {
        return $this->container['reference_codes'];
    }

    /**
     * Sets reference_codes
     * @param \Oda\Client\Model\ReferenceCode[] $reference_codes
     * @return $this
     */
    public function setReferenceCodes($reference_codes)
    {
        $this->container['reference_codes'] = $reference_codes;

        return $this;
    }

    /**
     * Gets report_items
     * @return \Oda\Client\Model\ScreeningResponseReportItem[]
     */
    public function getReportItems()
    {
        return $this->container['report_items'];
    }

    /**
     * Sets report_items
     * @param \Oda\Client\Model\ScreeningResponseReportItem[] $report_items
     * @return $this
     */
    public function setReportItems($report_items)
    {
        $this->container['report_items'] = $report_items;

        return $this;
    }

    /**
     * Gets result
     * @return string
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     * @param string $result
     * @return $this
     */
    public function setResult($result)
    {
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets submitted_at
     * @return \DateTime
     */
    public function getSubmittedAt()
    {
        return $this->container['submitted_at'];
    }

    /**
     * Sets submitted_at
     * @param \DateTime $submitted_at
     * @return $this
     */
    public function setSubmittedAt($submitted_at)
    {
        $this->container['submitted_at'] = $submitted_at;

        return $this;
    }

    /**
     * Gets trusted_user_id
     * @return string
     */
    public function getTrustedUserId()
    {
        return $this->container['trusted_user_id'];
    }

    /**
     * Sets trusted_user_id
     * @param string $trusted_user_id
     * @return $this
     */
    public function setTrustedUserId($trusted_user_id)
    {
        $this->container['trusted_user_id'] = $trusted_user_id;

        return $this;
    }

    /**
     * Gets updated_at
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     * @param \DateTime $updated_at
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Oda\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Oda\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


